using System;
using UnityEngine;

using Utils.SignalProcessing;
using EventType = Utils.SignalProcessing.EventType;

namespace CustomEvent
{
    [Serializable]
    public class FilterEvent : UnityEngine.Events.UnityEvent<FilterEventData>
    { }
}

namespace Utils
{
    // Automatically smoothes and interpretes slider data provided to it,
    // interpolating and filtering as necessary.
    // See class Utils.SignalProcessing.Filter
#pragma warning disable 649
    public class AutoFilter : MonoBehaviour
    {
        public CustomEvent.FilterEvent OnFilterOutput;

        public bool logOutput;

        [SerializeField]
        private uint epsilon, deadzone;

        private Filter filter;

        private void Start()
        {
            filter = new Filter(epsilon, deadzone);
            OnFilterOutput.AddListener(DefaultHandler);
        }

        private void DefaultHandler(FilterEventData e)
        {
            if (logOutput)
            {
                Debug.Log($"{(e.autoGenerated ? "Auto" : "Provided")}: {(e.value.HasValue ? e.value.ToString() : "(null)")}");
            }
        }

        public void Provide(uint value)
        {
            FilterEventData e = filter.PushHistory(value, Time.time);
            if (e.type == EventType.FingerUp)
            {
                OnFilterOutput.Invoke(e);
            }
        }
    }
}