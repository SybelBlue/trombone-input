using System;
using UnityEngine;

namespace SignalProcessing
{
    [Serializable]
    public enum FrequencyType
    {
        Frames,
        Seconds,
    }

    [Serializable]
    public enum EventType
    {
        FingerUp,
        FingerDown,
        Touching,
        NoTouches,
    }

    [Serializable]
    public readonly struct SliderEvent
    {
        public readonly EventType type;
        public readonly uint? value;
        public readonly bool autoGenerated;

        public SliderEvent(EventType type, uint? value, bool autoGenerated = false)
        {
            this.type = type;
            this.value = value;
            this.autoGenerated = autoGenerated;
        }
    }

#pragma warning disable 649
    public class AutoFilter : MonoBehaviour
    {
        public event Action<SliderEvent> FireSliderEvent;

        [SerializeField]
        private uint epsilon, deadzone;

        [SerializeField]
        private FrequencyType type;

        [SerializeField, Tooltip("After this amount of type without a value provided, will generate a value")]
        private double period;

        private Filter filter;

        private double currentTime => Utils.GetCurrentTime(type);

        public void Start()
        {
            filter = new Filter(epsilon, deadzone);
            Provide(null);
        }

        private (uint? value, double time) last;

        public void Provide(uint? value)
        {
            uint? output = PushToFilter(value);
            SliderEvent e = new SliderEvent(GetTypeFor(last.value, output), output);
            last = (output, currentTime);
            FireSliderEvent(e);
        }

        public void Generate()
        {
            last.time = currentTime;
            var value = PushToFilter(last.value);
            FireSliderEvent(new SliderEvent(GetTypeFor(last.value, value), value, autoGenerated: true));
        }

        private void Update()
        {
            if (currentTime - last.time >= period)
            {
                Generate();
            }
        }

        private uint? PushToFilter(uint? value)
        {
            var filtered = filter.Push(value ?? 0);
            return filtered <= deadzone || !value.HasValue ? null : filtered;
        }

        private static EventType GetTypeFor(uint? last, uint? current)
        {
            if (last.HasValue == current.HasValue)
            {
                return current.HasValue ? EventType.Touching : EventType.NoTouches;
            }
            return current.HasValue ? EventType.FingerDown : EventType.FingerUp;
        }
    }

    public static partial class Utils
    {
        public static double GetCurrentTime(FrequencyType type)
        {
            switch (type)
            {
                case FrequencyType.Frames:
                    return Time.frameCount;
                case FrequencyType.Seconds:
                    return Time.time;
            }
            throw new ArgumentException(type.ToString());
        }
    }
}